name: CI

on:
  push:
    branches: [main, develop]
    tags: ["strudel-v*"]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9.12.2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install frontend dependencies
        run: pnpm install

      - name: Run frontend tests
        run: pnpm test

      - name: Check Rust formatting
        run: cargo fmt --all -- --check
        working-directory: src-tauri

      - name: Run Rust clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        working-directory: src-tauri

      - name: Check Rust compilation
        run: cargo check --all-targets --all-features
        working-directory: src-tauri

  test-build:
    name: Test Build on ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9.12.2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install frontend dependencies
        run: pnpm install

      - name: Install system dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Build frontend
        run: pnpm run build

      - name: Test Tauri build (no release)
        run: pnpm run tauri build

  test-ai-chat:
    name: Test AI Chat Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9.12.2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        run: pnpm install

      - name: Check examples.json exists
        run: |
          if [ ! -f "website/public/examples.json" ]; then
            echo "❌ examples.json is missing - AI chat will not work properly"
            exit 1
          fi
          echo "✅ examples.json found"
          # Check if it has the expected structure
          node -e "
            const examples = require('./website/public/examples.json');
            if (!examples.examples || !Array.isArray(examples.examples)) {
              console.error('❌ examples.json has invalid structure');
              process.exit(1);
            }
            console.log('✅ examples.json has valid structure with', examples.examples.length, 'examples');
          "

      - name: Check doc.json exists
        run: |
          if [ ! -f "doc.json" ]; then
            echo "❌ doc.json is missing - AI chat documentation search will not work"
            exit 1
          fi
          echo "✅ doc.json found"

      - name: Test Rust compilation with AI dependencies
        run: |
          cd src-tauri
          cargo check --features custom-protocol
          echo "✅ Rust compilation successful with AI chat dependencies"

      - name: Test AI chat tools compilation
        run: |
          cd src-tauri
          cargo check --bin app --features custom-protocol
          echo "✅ AI chat tools compilation successful"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9.12.2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        run: pnpm install

      - name: Run pnpm audit
        run: pnpm audit --audit-level=moderate

      - name: Run cargo audit
        run: |
          cargo install cargo-audit
          cargo audit

  release:
    name: Release Build
    runs-on: ${{ matrix.platform }}
    if: startsWith(github.ref, 'refs/tags/strudel-v')
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9.12.2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install frontend dependencies
        run: pnpm install

      - name: Install system dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Build and Release Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "Strudel Desktop ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
